---
// src/components/Section/Section.astro
/**
 * Section Component – Order of Importance for Heading and Description Values:
 *
 * 1. **Section Override:**
 *    - Use the values passed directly via the Section props (i.e. the "heading" and "description" props).
 *
 * 2. **Meta Values:**
 *    - If no direct override is provided, load the collection meta file (_meta.mdx, _meta.md, or _meta.json)
 *      and use the "heading" and "description" defined there.
 *
 * 3. **Auto-Fallback:**
 *    - If neither the Section props nor the meta file provide a value, automatically generate a default.
 *      For the heading, this fallback is the collection slug capitalized (e.g., "services" becomes "Services").
 *
 * Extended to support sorting (sortBy, sortOrder) and manualOrder via frontmatter.
 */
import Heading from "@/components/Heading";
import Button from "@/components/Button/Button";
import ItemsTemplate from "../ItemsTemplates/ItemsTemplate.astro";
import BackgroundMedia from "./BackgroundMedia.astro";
import {
  generateSectionId,
  resolveMetaProps,
  resolveHeading,
  resolveDescription,
  resolveButtonsArray,
  getSectionItems,
} from "@/utils/SectionUtils";
import { capitalize } from "@/utils/ContentUtils";

const {
  tagName: rawTagName,
  variant: rawVariant,
  collection: collectionName,
  query: queryType,
  component: ItemComponent,
  heading,
  description,
  descriptionClass: rawDescriptionClass = "p-0 m-0",
  buttons,
  sectionClass: rawSectionClass,
  contentClass: rawContentClass,
  itemsClass: rawItemsClass,
  itemClass: rawItemClass,
  buttonsSectionClass:
  rawButtonsSectionClass = "flex items-center justify-center",
  headingAreaClass: rawHeadingAreaClass,
  backgroundMedia: rawBackgroundMedia,
  topContentClass: rawTopContentClass = "",
  bottomContentClass: rawBottomContentClass = "",
  bottomPlacement: rawBottomPlacement = "",
  itemPlacement: rawItemPlacement = "",
  childPlacement: rawChildPlacement = "",
  buttonsPlacement: rawButtonsPlacement = "",
  imageColumnClass: rawImageColumnClass = "",
  imageColPlacement: rawImageColPlacement = "",
  childSlotClass: rawChildSlotClass = "",
  client: rawClient,
  slider: rawSlider,
  sortBy: rawSortBy,
  sortOrder: rawSortOrder,
  manualOrder: rawManualOrder,

  ...props
} = Astro.props;

function mergeClass(...classes) {
  return classes.filter(Boolean).join(" ");
}

// 1️⃣ Load meta + defaults
const meta = await resolveMetaProps(collectionName, queryType);
const defaultSection = meta.defaultSection || {};

// ─── Merge sorting props with defaultSection ───
const sortBy = rawSortBy ?? defaultSection.sortBy;
const sortOrder = rawSortOrder ?? defaultSection.sortOrder;
const manualOrder = rawManualOrder ?? defaultSection.manualOrder ?? false;
// ────────────────────────────────────────────────

// 2️⃣ Determine variant
const variantName = rawVariant ?? defaultSection.variant;

// 3️⃣ Dynamically import SectionVariants if you actually have a variant
let variantDefaults = {};
if (variantName) {
  const variantsModule = await import("./SectionVariants.js");
  variantDefaults = variantsModule.SectionVariants?.[variantName] ?? {};
}

// 4️⃣ Decide which element/tag to render:
//    1) explicit <Section tag="…">
//    2) variantDefaults.tagName
//    3) defaultSection.tagName
//    4) fallback to "section"
const Element =
  rawTagName ??
  variantDefaults.tagName ??
  defaultSection.tagName ??
  "section";

// 4️⃣ Merge all class props
const sectionClass = mergeClass(
  variantDefaults.sectionClass,
  defaultSection.sectionClass,
  rawSectionClass
);
const contentClass = mergeClass(
  variantDefaults.contentClass,
  defaultSection.contentClass,
  rawContentClass
);
const itemsClass = mergeClass(
  variantDefaults.itemsClass,
  defaultSection.itemsClass,
  rawItemsClass
);
const itemClass = mergeClass(
  variantDefaults.itemClass,
  defaultSection.itemClass,
  rawItemClass
);
const buttonsSectionClass = mergeClass(
  variantDefaults.buttonsSectionClass,
  defaultSection.buttonsSectionClass,
  rawButtonsSectionClass
);
const headingAreaClass = mergeClass(
  variantDefaults.headingAreaClass,
  defaultSection.headingAreaClass,
  rawHeadingAreaClass
);
const topContentClass = mergeClass(
  variantDefaults.topContentClass,
  defaultSection.topContentClass,
  rawTopContentClass
);
/** merge classes for that new bottom-content section **/
const bottomContentClass = mergeClass(
  variantDefaults.bottomContentClass,
  defaultSection.bottomContentClass,
  rawBottomContentClass
);
const imageColumnClass = mergeClass(
  variantDefaults.imageColumnClass,
  defaultSection.imageColumnClass,
  rawImageColumnClass
);

const childSlotClass = mergeClass(
  variantDefaults.childSlotClass,
  defaultSection.childSlotClass,
  rawChildSlotClass
);

// 🚀 description class merge
const descriptionClass = mergeClass(
  variantDefaults.descriptionClass,
  defaultSection.descriptionClass,
  rawDescriptionClass,
  description && typeof description === "object" && description.class
    ? description.class
    : ""
);

// 5️⃣ Background media fallback
const backgroundMedia =
  rawBackgroundMedia ??
  variantDefaults.backgroundMedia ??
  defaultSection.backgroundMedia;

// ─── normalize bottomPlacement ───
const bottomPlacement =
  rawBottomPlacement ||
  variantDefaults.bottomPlacement ||
  defaultSection.bottomPlacement ||
  "content-section";

// 6️⃣ Placement props
const itemPlacement =
  rawItemPlacement ||
  variantDefaults.itemPlacement ||
  defaultSection.itemPlacement ||
  "";
  const imageColPlacement =
  rawImageColPlacement ||
  variantDefaults.imageColPlacement ||
  defaultSection.imageColPlacement ||
  "content-section";
const childPlacement =
  rawChildPlacement ||
  variantDefaults.childPlacement ||
  defaultSection.childPlacement ||
  "";
/** default your CTAs into the new bottom-content-section **/
const buttonsPlacement =
  rawButtonsPlacement ||            // ← logical OR so empty string is skipped
  variantDefaults.buttonsPlacement ||
  defaultSection.buttonsPlacement ||
  "bottom-content-section"; 

// normalize to arrays
const bottomPlacementArray = Array.isArray(bottomPlacement)
  ? bottomPlacement
  : bottomPlacement
    ? [bottomPlacement]
    : [];
    const imageColPlacementArray = Array.isArray(imageColPlacement)
  ? imageColPlacement
  : imageColPlacement
    ? [imageColPlacement]
    : [];

const itemPlacementArray = Array.isArray(itemPlacement)
  ? itemPlacement
  : itemPlacement
    ? [itemPlacement]
    : [];
const childPlacementArray = Array.isArray(childPlacement)
  ? childPlacement
  : childPlacement
    ? [childPlacement]
    : [];
const buttonsPlacementArray = Array.isArray(buttonsPlacement)
  ? buttonsPlacement
  : buttonsPlacement
    ? [buttonsPlacement]
    : [];

// 7️⃣ Generate section ID
const sectionId = generateSectionId(
  collectionName,
  queryType,
  Astro.url.pathname
);

// 8️⃣ Heading & description
const headingProp = heading ?? defaultSection.heading;
const finalHeadingArray = resolveHeading(
  headingProp,
  meta.heading,
  collectionName
);const finalDescription = resolveDescription(description, meta.description);

// 9️⃣ Resolve item component + client
const finalComponent = ItemComponent ?? defaultSection.component;
const finalClient = rawClient ?? defaultSection.client;

// 🔟 Fetch dynamic items
let items = [];
const isDynamic = Boolean(collectionName && queryType);
if (isDynamic) {
  items = await getSectionItems(queryType, collectionName, Astro.url.pathname);
  if (items.length === 0) return;
}

// 1️⃣1️⃣ Slider merge from metadata
// 1️⃣1️⃣ Slider merge from metadata (DEBUG)
// console.log("🔍 defaultSection.slider =", defaultSection.slider);
// console.log("🔍 rawSlider prop =", rawSlider)
// Use the slider from props if provided, otherwise fall back to defaultSection.slider, or finally `{ enabled: false }`.
const sliderConfig =
  rawSlider != null
    ? rawSlider
    : defaultSection.slider != null
      ? defaultSection.slider
      : { enabled: false };

// console.log("🛠️ sliderConfig in Section:", sliderConfig);

// 1️⃣1️⃣ Buttons array
const effectiveButtons =
  buttons && buttons.length > 0 ? buttons : defaultSection.buttons;
const buttonsArray = resolveButtonsArray(
  effectiveButtons,
  meta.hasPage,
  collectionName,
  Astro.url.pathname
);
const itemsDefaultHasPage = meta.itemsHasPage ?? false;
---
<Element
  id={sectionId}
  data-collection={collectionName}
  class={`${sectionClass} relative w-full`}
  {...props}
>
  {backgroundMedia && <BackgroundMedia backgroundMedia={backgroundMedia} />}

  <div class={`content-section ${contentClass} max-w-full relative z-10 ${isDynamic ? "" : ""}`}>

    <div class={`top-content-section ${topContentClass}`}>
      <div class={`section-heading-area  ${headingAreaClass}`}>
        {
          finalHeadingArray.map((head, i) => {
            // normalize string → object
            const H = typeof head === "string" ? { text: head } : head;

            const Tag = H.tagName || "h2";
            const wrapperCls = H.class || "";
            const before = H.before || "";
            const text = H.text || "";
            const after = H.after || "";
            const bc = H.beforeClass || "";
            const tc = H.textClass || "";
            const ac = H.afterClass || "";

            return (
              <Heading
                key={i}
                tagName={Tag}
                className={wrapperCls}
                before={before}
                text={text}
                after={after}
                beforeClass={bc}
                textClass={tc}
                afterClass={ac}
              />
            );
          })
        }

        {finalDescription && <p class={descriptionClass}>{finalDescription}</p>}

        {/* ︎︎🆕 Items in heading area (exclusive) */}
        {
          itemPlacementArray.includes("section-heading-area") && isDynamic && (
            <>
              <slot name="aboveItemsInjection" />
              <ItemsTemplate
                items={items}
                collection={collectionName}
                query={queryType}
                itemsClass={itemsClass}
                itemClass={itemClass}
                ItemComponent={finalComponent}
                HasPage={itemsDefaultHasPage}
                pathname={Astro.url.pathname}
                sortBy={sortBy}
                sortOrder={sortOrder}
                manualOrder={manualOrder}
                client={finalClient}
                slider={sliderConfig}
              />
              <slot name="belowItemsInjection" />
            </>
          )
        }
      </div>

          { bottomPlacementArray.includes("top-content-section") && (
    <div class={`bottom-content-section ${bottomContentClass}`}>

      {/* ︎︎🆕 Items in bottom-area */}
      {isDynamic && itemPlacementArray.includes("bottom-content-section") && (
        <>
          <slot name="aboveItemsInjection" />
          <ItemsTemplate
            items={items}
            collection={collectionName}
            query={queryType}
            itemsClass={itemsClass}
            itemClass={itemClass}
            ItemComponent={finalComponent}
            HasPage={itemsDefaultHasPage}
            pathname={Astro.url.pathname}
            sortBy={sortBy}
            sortOrder={sortOrder}
            manualOrder={manualOrder}
            client={finalClient}
            slider={sliderConfig}
          />
          <slot name="belowItemsInjection" />
        </>
      )}

      {imageColPlacementArray.includes("bottom-content-section") && (
  <div class={imageColumnClass}>
    <slot name="imageColumn" />
  </div>
)}

      {/* ︎︎🆕 Child slot in bottom-area */}
      {childPlacementArray.includes("bottom-content-section") && (
        <div class={childSlotClass}>
          <slot />
        </div>
      )}

      {/* ︎︎🆕 Buttons in bottom-area */}
      {buttonsPlacementArray.includes("bottom-content-section") &&
        buttonsArray.length > 0 && (
          <div class={buttonsSectionClass}>
            {buttonsArray.map((btn, idx) => {
              const defaults = {
                text: capitalize(collectionName),
                link: `/${collectionName}`,
                class: "",
                variant: "primary",
              };
              const props = { ...defaults, ...btn };
              return (
                <Button
                  key={idx}
                  href={props.link}
                  class={props.class}
                  ariaLabel={props.text}
                  variant={props.variant}
                  showIcon={props.showIcon}
                  iconProps={props.iconProps}
                >
                  {props.text}
                </Button>
              );
            })}
          </div>
      )}
    </div>
      )}

      {/* ── optional “image column” */}
{/* 🖼️ Dynamic Image Column Placement */}
{imageColPlacementArray.includes("top-content-section") && (
  <div class={imageColumnClass}>
    <slot name="imageColumn" />
  </div>
)}
      {/* ︎︎🆕 Image column (optional) */}
      
      {childPlacementArray.includes("top-content-section") && <slot />}

      {/* ︎︎🆕 Items in top-content (only if not placed in heading) */}
      {
        itemPlacementArray.includes("top-content-section") &&
          !itemPlacementArray.includes("section-heading-area") &&
          isDynamic && (
            <>
              <slot name="aboveItemsInjection" />
              <ItemsTemplate
                items={items}
                collection={collectionName}
                query={queryType}
                itemsClass={itemsClass}
                itemClass={itemClass}
                ItemComponent={finalComponent}
                HasPage={itemsDefaultHasPage}
                pathname={Astro.url.pathname}
                sortBy={sortBy}
                sortOrder={sortOrder}
                manualOrder={manualOrder}
                client={finalClient}
                slider={sliderConfig}
              />
              <slot name="belowItemsInjection" />
            </>
          )
      }

      {
        isDynamic &&
          buttonsPlacementArray.includes("top-content-section") &&
          buttonsArray.length > 0 && (
            <div class={buttonsSectionClass}>
              {buttonsArray.map((btn, idx) => {
                const defaults = {
                  text: capitalize(collectionName),
                  link: `/${collectionName}`,
                  class: "",
                  variant: "primary",
                };
                const props = { ...defaults, ...btn };
                return (
                  <Button
                    key={idx}
                    href={props.link}
                    className={props.class}
                    ariaLabel={props.text}
                    variant={props.variant}
                    showIcon={props.showIcon}
                    iconProps={props.iconProps}
                  >
                    {props.text}
                  </Button>
                );
              })}
            </div>
          )
      }

      {
        !isDynamic &&
          buttonsPlacementArray.includes("top-content-section") &&
          buttonsArray.length > 0 && (
            <div class={`${buttonsSectionClass} order-last`}>
              {buttonsArray.map((btn, idx) => {
                const defaults = {
                  text: capitalize(collectionName),
                  link: `/${collectionName}`,
                  class: "",
                  variant: "primary",
                };
                const props = { ...defaults, ...btn };
                return (
                  <Button
                    key={idx}
                    href={props.link}
                    class={props.class}
                    ariaLabel={props.text}
                    variant={props.variant}
                    showIcon={props.showIcon}
                    iconProps={props.iconProps}
                  >
                    {props.text}
                  </Button>
                );
              })}
            </div>
          )
      }
    </div>

        { bottomPlacementArray.includes("content-section") && (
    <div class={`bottom-content-section ${bottomContentClass}`}>

      {/* ︎︎🆕 Items in bottom-area */}
      {isDynamic && itemPlacementArray.includes("bottom-content-section") && (
        <>
          <slot name="aboveItemsInjection" />
          <ItemsTemplate
            items={items}
            collection={collectionName}
            query={queryType}
            itemsClass={itemsClass}
            itemClass={itemClass}
            ItemComponent={finalComponent}
            HasPage={itemsDefaultHasPage}
            pathname={Astro.url.pathname}
            sortBy={sortBy}
            sortOrder={sortOrder}
            manualOrder={manualOrder}
            client={finalClient}
            slider={sliderConfig}
          />
          <slot name="belowItemsInjection" />
        </>
      )}

      {/* ︎︎🆕 Child slot in bottom-area */}
      {childPlacementArray.includes("bottom-content-section") && (
        <div class={childSlotClass}>
          <slot />
        </div>
      )}

      {imageColPlacementArray.includes("bottom-content-section") && (
  <div class={imageColumnClass}>
    <slot name="imageColumn" />
  </div>
)}

      {/* ︎︎🆕 Buttons in bottom-area */}
      {buttonsPlacementArray.includes("bottom-content-section") &&
        buttonsArray.length > 0 && (
          <div class={buttonsSectionClass}>
            {buttonsArray.map((btn, idx) => {
              const defaults = {
                text: capitalize(collectionName),
                link: `/${collectionName}`,
                class: "",
                variant: "primary",
              };
              const props = { ...defaults, ...btn };
              return (
                <Button
                  key={idx}
                  href={props.link}
                  class={props.class}
                  ariaLabel={props.text}
                  variant={props.variant}
                  showIcon={props.showIcon}
                  iconProps={props.iconProps}
                >
                  {props.text}
                </Button>
              );
            })}
          </div>
      )}
    </div>
      )}

    {imageColPlacementArray.includes("content-section") && (
  <div class={imageColumnClass}>
    <slot name="imageColumn" />
  </div>
)}
    
    {
      /* ︎︎🆕 Default items in content-section (only if no heading/top placement) */
    }
    {
      isDynamic &&
        !itemPlacementArray.includes("top-content-section") &&
        !itemPlacementArray.includes("section-heading-area") &&
        !itemPlacementArray.includes("bottom-content-section") && (
          <>
            <slot name="aboveItemsInjection" />
            <ItemsTemplate
              items={items}
              collection={collectionName}
              query={queryType}
              itemsClass={itemsClass}
              itemClass={itemClass}
              ItemComponent={finalComponent}
              HasPage={itemsDefaultHasPage}
              pathname={Astro.url.pathname}
              sortBy={sortBy}
              sortOrder={sortOrder}
              manualOrder={manualOrder}
              client={finalClient}
              slider={sliderConfig}
            />
            <slot name="belowItemsInjection" />
          </>
        )
    }

    {
      isDynamic &&
        buttonsPlacementArray.includes("content-section") &&
        buttonsArray.length > 0 && (
          <div class={`${buttonsSectionClass}`}>
            {buttonsArray.map((btn, idx) => {
              const defaults = {
                text: capitalize(collectionName),
                link: `/${collectionName}`,
                class: "",
                variant: "primary",
              };
              const props = { ...defaults, ...btn };
              return (
                <Button
                  key={idx}
                  href={props.link}
                  class={props.class}
                  ariaLabel={props.text}
                  variant={props.variant}
                  showIcon={props.showIcon}
                  iconProps={props.iconProps}
                >
                  {props.text}
                </Button>
              );
            })}
          </div>
        )
    }

    {
      !isDynamic &&
        buttonsPlacementArray.includes("content-section") &&
        buttonsArray.length > 0 && (
          <div class={`${buttonsSectionClass} order-last`}>
            {buttonsArray.map((btn, idx) => {
              const defaults = {
                text: capitalize(collectionName),
                link: `/${collectionName}`,
                class: "",
                variant: "primary",
              };
              const props = { ...defaults, ...btn };
              return (
                <Button
                  key={idx}
                  href={props.link}
                  class={props.class}
                  ariaLabel={props.text}
                  variant={props.variant}
                  showIcon={props.showIcon}
                  iconProps={props.iconProps}
                >
                  {props.text}
                </Button>
              );
            })}
          </div>
        )
    }

    {
      !childPlacementArray.includes("section-heading-area") &&
!childPlacementArray.includes("top-content-section") &&
!childPlacementArray.includes("bottom-content-section") && (
        <div class={childSlotClass}>
          <slot />
        </div>
      )
    }
  </div>
</section>