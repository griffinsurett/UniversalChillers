---
// src/components/BackgroundMedia.astro
import { getImage } from "astro:assets";

// Accept a backgroundMedia prop that may include video, image, and overlay information.
const { backgroundMedia } = Astro.props;

let optimizedBackgroundImage = null;
if (backgroundMedia?.image && backgroundMedia.image.src) {
  optimizedBackgroundImage = await getImage({ src: backgroundMedia.image.src }, {
    format: "webp",
    quality: 50,
    width: 1200,
    placeholder: "blur",
  });
}
---
{backgroundMedia?.video && backgroundMedia.video.src ? (
  <video
    class={`absolute inset-0 z-0 w-full h-full object-cover ${backgroundMedia.video.videoClass || ""}`}
    autoPlay={backgroundMedia.video.autoPlay !== undefined ? backgroundMedia.video.autoPlay : true}
    muted={backgroundMedia.video.muted !== undefined ? backgroundMedia.video.muted : true}
    loop={backgroundMedia.video.loop !== undefined ? backgroundMedia.video.loop : true}
    playsInline={backgroundMedia.video.playsInline !== undefined ? backgroundMedia.video.playsInline : true}
    controls={backgroundMedia.video.controls || false}
    preload={backgroundMedia.video.preload || "metadata"}
    poster={optimizedBackgroundImage ? optimizedBackgroundImage.src : ""}
    aria-hidden="true"
  >
    <source src={backgroundMedia.video.src} type="video/mp4" />
    Your browser does not support the video tag.
  </video>
) : (
  optimizedBackgroundImage && (
    <div
      class={`absolute inset-0 z-0 ${backgroundMedia?.image?.imageClass || ""}`}
      style={`background-image: url('${optimizedBackgroundImage.src}');`}
      aria-hidden="true"
    ></div>
  )
)}
{backgroundMedia?.overlayClass && (
  <div class={`absolute inset-0 ${backgroundMedia.overlayClass} z-0`} aria-hidden="true"></div>
)}
